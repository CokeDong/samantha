samantha.gbcent {
  engineType = "PREDICTOR"
  indexers = [
    {
      name = "LoggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }
  ]
  retrievers = []
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    predictorKey = "predictor"
  }
  predictors = [
    {
      name = "gbcent"
      configClass = "org.grouplens.samantha.server.predictor.RegressionTreeGBCentPredictorConfig"
      modelName = "gbcent-model"
      modelFile = ${samantha.modelDir}"/gbcent-model.bin"
      svdfeaModelName = "cate-model"
      svdfeaPredictorName = "cate"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.redhat.entityDaosConfig}
      minSupport = 50
      learnSVDFeature = false
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.0
      }
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            attrName = "numericalFeature1"
            indexName = "TREE"
            feaName = "numericalFeature1"
          }
        ]
      }
      treeFeatures = ["numericalFeature1"]
    }, {
      name = "cate"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "cate-model"
      modelFile = ${samantha.modelDir}"/cate-model.bin"
      labelName = "label"
      weightName = "weight"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.redhat.entityDaosConfig}
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "categoricalFeature1"
            feaName = "categoricalFeature1Bias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "categoricalFeature2"
            feaName = "categoricalFeature2Bias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "categoricalFeature1"
            feaName = "categoricalFeature1Factor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "categoricalFeature2"
            feaName = "categoricalFeature2Factor"
          }
        ]
      }
      lossFunctionClass = "org.grouplens.samantha.modeler.solver.LogisticLoss"
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        maxIter = 1
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 50
        learningRate = 0.01
        l2coef = 0.0
      }
      factDim = 20
      biasFeas = ["globalBias", "categoricalFeature1Bias", "categoricalFeature2Bias"]
      ufactFeas = ["categoricalFeature1Factor", "categoricalFeature2Factor"]
      ifactFeas = ["categoricalFeature1Factor", "categoricalFeature2Factor"]
    }
  ]
  evaluators = [
    {
      name = "BinaryClassificationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      indexers = ["LoggerBasedIndexer"]
      predictionIndexers = []
      indexerType = "BinaryClassificationEvaluator"
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.movielens.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "label"
          aucType = "GLOBAL"
        }
      ]
    }, {
      name = "PredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      indexers = ["LoggerBasedIndexer"]
      predictionIndexers = []
      indexerType = "PredictionEvaluator"
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.movielens.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "label"
        }
      ]
    }
  ]
  schedulers = []
}
