samantha.experiment {
  engineType = "RECOMMENDER"
  simpleDaosConfig {
    entityDaoKey = "entityDaoName"
    RequestEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.RequestEntityDAOConfig"
      entitiesKey = "entities"
    }
    CSVFileEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVFileDAOConfig"
      filePathKey = "filePath"
      separatorKey = "separator"
    }
    CSVFileListEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVFileListDAOConfig"
      filesKey = "files"
      separatorKey = "separator"
    }
    CSVDirEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVDirDAOConfig"
      dirPathKey = "dirPath"
      separatorKey = "separator"
    }
    RequestItemIDListDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.RequestItemIDListDAOConfig"
      attrName = "movieId"
      itemListKey = "movieIds"
    }
    IndexerBasedDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.IndexerBasedDAOConfig"
      indexerNameKey = "indexerName"
      indexerReqKey = "requestContext"
    }
  }
  entityDaosConfig = ${samantha.experiment.simpleDaosConfig}
  entityDaosConfig.TimeFilteredDAO {
    daoConfigClass = "org.grouplens.samantha.server.dao.TimeFilteredDAOConfig"
    entityDaosConfig = ${samantha.experiment.simpleDaosConfig}
    timestampField = "tstamp"
    beginTimeKey = "beginTime"
    endTimeKey = "endTime"
    subDaoConfigKey = "subDaoConfig"
  }
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "userMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.experiment.entityDaosConfig}
    }
  ]
  retrievers = []
  predictors = [
    {
      name = "expt-rating-predictor"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "expt-rating-predictor-model"
      modelFile = ${samantha.modelDir}"/expt-rating-predictor-model.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.experiment.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "movieBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "movieFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 0.0
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 0.0
        maxIter = 5
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "movieBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["movieFactor"]
    }
  ]
  rankers = []
  recommenders = []
  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "RealPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.experiment.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.experiment.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieId"]
          relevanceKey = "rating"
          threshold = 4.0
          N = [8, 24]
        }
      ]
    }
  ]
  schedulers = []
}
