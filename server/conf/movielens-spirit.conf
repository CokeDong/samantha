samantha.movielens-spirit {
  engineType = "RECOMMENDER"
  simpleDaosConfig {
    entityDaoKey = "entityDaoName"
    RequestEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.RequestEntityDAOConfig"
      entitiesKey = "entities"
    }
    CSVFileEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVFileDAOConfig"
      filePathKey = "filePath"
      separatorKey = "separator"
    }
    CSVFileListEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVFileListDAOConfig"
      filesKey = "files"
      separatorKey = "separator"
    }
    CSVDirEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVDirDAOConfig"
      filePathKey = "dirPath"
      separatorKey = "separator"
    }
    RequestItemIDListDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.RequestItemIDListDAOConfig"
      attrName = "movieId"
      itemListKey = "movieIds"
    }
    IndexerBasedDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.IndexerBasedDAOConfig"
      indexerNameKey = "indexerName"
      indexerReqKey = "requestContext"
    }
  }
  entityDaosConfig = ${samantha.movielens-spirit.simpleDaosConfig}
  entityDaosConfig.TimeFilteredDAO {
    daoConfigClass = "org.grouplens.samantha.server.dao.TimeFilteredDAOConfig"
    entityDaosConfig = ${samantha.movielens-spirit.simpleDaosConfig}
    timestampField = "tstamp"
    beginTimeKey = "beginTime"
    endTimeKey = "endTime"
    subDaoConfigKey = "subDaoConfig"
  }
  indexers = [
    {
      name = "loggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }, {
      name = "goodMovieData"
      indexPrefix = "movieData"
      configClass = "org.grouplens.samantha.server.indexer.RedisBasedIndexerConfig"
      dataFields = ["movieId", "releaseYear", "popularity"]
      indexStructure = "HASH_SET"
      hashFields = ["movieId"]
      keyFields = ["movieId"]
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
    }, {
      name = "movieData"
      indexPrefix = "badMovieData"
      configClass = "org.grouplens.samantha.server.indexer.RedisBasedIndexerConfig"
      dataFields = ["movieId", "releaseYear", "popularity"]
      indexStructure = "HASH_SET"
      hashFields = ["movieId"]
      keyFields = ["movieId"]
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
    }, {
      name = "userMovieInteraction"
      indexPrefix = "userMovieInteraction"
      configClass = "org.grouplens.samantha.server.indexer.RedisBasedIndexerConfig"
      dataFields = ["userId", "movieId"]
      indexStructure = "HASH_SET"
      hashFields = ["movieId"]
      keyFields = ["userId"]
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
    }, {
      name = "userMovieRatingHistory"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.FieldThresholdFilterExpander"
          filterAttr = "rating"
          minVal = 0.5
        }
      ]
    }, {
      name = "userMovieRating"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMovieRating"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "rating", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.FieldThresholdFilterExpander"
          filterAttr = "rating"
          minVal = 0.5
        }
      ]
      dataSubscribers = [{
        name = "sp-rating"
        componentType = "PREDICTOR"
        requestContext {
          modelOperation: "UPDATE",
          modelName: "sp-rating-model",
          predictor: "sp-rating"
        }
      }]
    }, {
      name = "userMovieActionHistory"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMovieAction"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
    }, {
      name = "userMovieAction"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMovieAction"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      dataSubscribers = [{
        name = "sp-action"
        componentType = "PREDICTOR"
        requestContext {
          modelOperation: "UPDATE",
          modelName: "sp-action-model",
          predictor: "sp-action"
        }
      }]
    }, {
      name = "groupedUserMovieAction"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieAction"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "tstamp"]
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      numBuckets = 10
      separator = "\t"
      dataDir = ${samantha.dataDir}"/groupedUserMovieAction"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.experiment.entityDaosConfig}
    }, {
      name = "userMoviePercentileHistory"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMoviePercentile"
      filesKey = "files"
      separatorKey = "separator"
      dataFields =["userId", "sessionId", "movieId", "action", "releaseYear", "popularity", "predRating", "predAction", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      daoNameKey = "entityDaoName"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }
      ]
    }, {
      name = "userMovieShowCSV"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "userMovieShow"
      filesKey = "files"
      separatorKey = "separator"
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      daoNameKey = "entityDaoName"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      dataFields = ["userId", "sessionId", "movieId", "action", "releaseYear", "popularity", "predRating", "predAction",
        "releaseYearPercentile", "popularityPercentile", "predRatingPercentile", "predActionPercentile",
        "state-releaseYearPercentile", "state-popularityPercentile", "state-predRatingPercentile",
        "state-predActionPercentile", "sp-ra-user-state-model-state-cnt", "tstamp"]
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
        }, {
          expanderClass = "org.grouplens.samantha.server.reinforce.SimpleAverageUserState"
          actionAttrs = ["predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile"]
          stateKeys = ["userId"]
          stateModelName = "sp-ra-user-state-model"
          updateKey = "updateState"
        }
      ]
    }, {
      name = "groupedUserMovieShow"
      configClass = "org.grouplens.samantha.server.indexer.GroupedIndexerConfig"
      dependedIndexer = "userMovieShowCSV"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "sessionId", "movieId", "action", "releaseYear", "popularity", "predRating", "predAction",
        "releaseYearPercentile", "popularityPercentile", "predRatingPercentile", "predActionPercentile",
        "state-releaseYearPercentile", "state-popularityPercentile", "state-predRatingPercentile",
        "state-predActionPercentile", "sp-ra-user-state-model-state-cnt", "tstamp"]
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      groupKeys = ["userId"]
      orderFields = ["tstamp"]
      numBuckets = 100
      usedBuckets = 7
      separator = "\t"
      dataDir = ${samantha.dataDir}"/groupedUserMovieShow"
      dataDirKey = "dataDir"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.experiment.entityDaosConfig}
    }, {
      name = "userMovieShowHistory"
      configClass = "org.grouplens.samantha.server.reinforce.UserReturnIndexerConfig"
      dependedIndexer = "groupedUserMovieShow"
      dataFields = ["userId", "sessionId", "movieId", "action", "releaseYear", "popularity", "predRating", "predAction",
        "releaseYearPercentile", "popularityPercentile", "predRatingPercentile", "predActionPercentile",
        "state-releaseYearPercentile", "state-popularityPercentile", "state-predRatingPercentile",
        "state-predActionPercentile", "sp-ra-user-state-model-state-cnt", "reward", "tstamp"]
      timestampField = "tstamp"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      filesKey = "files"
      separator = "\t"
      separatorKey = "separator"
      groupKeys = ["userId"]
      sessionIdKey = "sessionId"
      rewardKey = "reward"
      filePathKey = "filePath"
      filePath = ${samantha.dataDir}"/trainReinforce.tsv"
      daoConfigKey = "daoConfig"
      reinforceThreshold = 604800 #one week
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
    }, {
      name = "userMovieShow" #the indexing of this data should go after each individual show following
      configClass = "org.grouplens.samantha.server.reinforce.UserReturnIndexerConfig"
      dependedIndexer = "groupedUserMovieShow"
      dataFields = ["userId", "sessionId", "movieId", "action", "releaseYear", "popularity", "predRating", "predAction",
        "releaseYearPercentile", "popularityPercentile", "predRatingPercentile", "predActionPercentile",
        "state-releaseYearPercentile", "state-popularityPercentile", "state-predRatingPercentile",
        "state-predActionPercentile", "sp-ra-user-state-model-state-cnt", "reward", "tstamp"]
      timestampField = "tstamp"
      daoName = "CSVFileListEntityDAO"
      daoNameKey = "entityDaoName"
      filesKey = "files"
      separator = "\t"
      separatorKey = "separator"
      groupKeys = ["userId"]
      sessionIdKey = "sessionId"
      rewardKey = "reward"
      filePathKey = "filePath"
      filePath = ${samantha.dataDir}"/trainReinforce.tsv"
      daoConfigKey = "daoConfig"
      reinforceThreshold = 604800 #one week
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      dataSubscribers = [{
        name = "sp-ra"
        componentType = "PREDICTOR"
        requestContext {
          modelName = "sp-ra-user-state-model"
          modelOperation = "UPDATE"
        }
      }]
    }, {
      name = "sp-bt-userMovieShow"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "sp-bt-userMovieShow"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "predRating", "predRatingPercentile", "predAction", "predActionPercentile", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction"]
        }
      ]
      dataSubscribers = [{
        name = "sp-bt"
        componentType = "PREDICTOR"
        requestContext {
          modelOperation: "UPDATE",
          modelName: "sp-bt-model",
          predictor: "sp-bt"
        }
      }]
    }, {
      name = "sp-ba-userMovieShow"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "sp-ba-userMovieShow"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "predRating", "predAction", "releaseYear", "popularity",
        "predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
        }
      ]
      dataSubscribers = [{
        name = "sp-ba"
        componentType = "PREDICTOR"
        requestContext {
          modelOperation: "UPDATE",
          modelName: "sp-ba-model",
          predictor: "sp-ba"
        }
      }]
    }, {
      name = "sp-bs-userMovieShow"
      configClass = "org.grouplens.samantha.server.indexer.CSVFileIndexerConfig"
      indexType = "sp-bs-userMovieShow"
      filesKey = "files"
      separatorKey = "separator"
      dataFields = ["userId", "movieId", "action", "predRating", "predAction", "releaseYear", "popularity",
        "predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile",
        "state-releaseYearPercentile", "state-popularityPercentile", "state-predRatingPercentile",
        "state-predActionPercentile", "tstamp"]
      timestampField = "tstamp"
      daoName = "TimeFilteredDAO"
      daoNameKey = "entityDaoName"
      subDaoName = "CSVFileListEntityDAO"
      subDaoConfigKey = "subDaoConfig"
      beginTimeKey = "beginTime"
      endTimeKey = "endTime"
      daoConfigKey = "daoConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
        }, {
          expanderClass = "org.grouplens.samantha.server.reinforce.SimpleAverageUserState"
          actionAttrs = ["predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile"]
          stateKeys = ["userId"]
          stateModelName = "sp-ra-user-state-model"
        }
      ]
      dataSubscribers = [{
        name = "sp-bs"
        componentType = "PREDICTOR"
        requestContext {
          modelOperation: "UPDATE",
          modelName: "sp-bs-model",
          predictor: "sp-bs"
        }
      }]
    }
  ]
  retrievers = [
    {
      name = "RedisMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.ItemKnnRetrieverConfig"
      userInterRetrieverName = "RedisUserMovieInteractionRetriever"
      knnModelName = "spirit-item-knn-model"
      kdnModelName = "spirit-item-kdn-model"
      knnModelFile = ${samantha.modelDir}"/itemKnnModel.bin"
      svdfeaPredictorName = "sp-rating"
      svdfeaModelName = "sp-rating-model"
      numNeighbors = 30
      minSupport = 10
      itemAttrs = ["movieId"]
      scoreAttr = "redisMovieRetrieverScore"
    }, {
      name = "RequestBasedMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.RequestBasedRetrieverConfig"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
    }, {
      name = "FeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      modelName = "spirit-feature-support-model"
      modelFile = ${samantha.modelDir}"/featureSupportModel.bin"
      maxHits = 1000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      svdfeaPredictorName = "sp-rating"
      svdfeaModelName = "sp-rating-model"
    }, {
      name = "ReinforceLearningFeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      modelName = "spirit-feature-support-model"
      modelFile = ${samantha.modelDir}"/featureSupportModel.bin"
      maxHits = 1000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      svdfeaPredictorName = "sp-rating"
      svdfeaModelName = "sp-rating-model"
    }, {
      name = "MultipleBlendingMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.MultipleBlendingRetrieverConfig"
      itemAttrs = ["movieId"]
      maxHits = 500
      retrieverNames = ["RedisMovieRetriever", "FeatureSupportMovieRetriever", "RequestBasedMovieRetriever"]
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RetrieverBasedItemFilterExpander"
          retrieverName = "RequestBasedMovieRetriever"
          itemAttrs = ["movieId"]
          exclude = false
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.FieldThresholdFilterExpander"
          filterAttr = "popularity"
          minVal = 100
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId"]
        }
      ]
    }, {
      name = "RedisUserMovieInteractionRetriever"
      configClass = "org.grouplens.samantha.server.retriever.RedisKeyBasedRetrieverConfig"
      retrieveFields = ["userId", "movieId"]
      keyFields = ["userId"]
      indexPrefix = "userMovieInteraction"
    }
  ]
  predictors = [
    {
      name = "sp-action"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "sp-action-model"
      modelFile = ${samantha.modelDir}"/actionSVDFeature.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["BinaryPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "itemBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "itemFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.LogisticLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 1.0e-5
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        maxIter = 20
        minIter = 5
        learningRate = 0.01
        l2coef = 1.0e-5
        cachePath = ${samantha.dataDir}
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "itemBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["itemFactor"]
    }, {
      name = "sp-rating"
      configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
      modelName = "sp-rating-model"
      modelFile = ${samantha.modelDir}"/ratingSVDFeature.bin"
      labelName = "rating"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.FieldThresholdFilterExpander"
          filterAttr = "rating"
          minVal = 0.5
          filterWhenNotPresent = false
        }
      ]
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RealPredictionEvaluator"]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "BIASES"
            attrName = "userId"
            feaName = "userBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "BIASES"
            feaName = "itemBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            indexName = "FACTORS"
            attrName = "userId"
            feaName = "userFactor"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
            attrName = "movieId"
            indexName = "FACTORS"
            feaName = "itemFactor"
          }
        ]
      }
      objectiveConfig {
        objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
      }
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 0.01
        l2coef = 1.0e-5
      }
      optimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        minIter = 5
        maxIter = 20
        learningRate = 0.01
        l2coef = 1.0e-5
        cachePath = ${samantha.dataDir}
      }
      factDim = 30
      biasFeas = ["globalBias", "userBias", "itemBias"]
      ufactFeas = ["userFactor"]
      ifactFeas = ["itemFactor"]
    }, {
      name = "sp-ra-build-dep"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "evaluatingModelsp-ra-model"
      modelFile = ${samantha.modelDir}"/reinforceAllLinearUCB.bin"
      labelName = "delayedReward"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.RequestBasedExpander"
          requestFields = ["userId", "state-releaseYearPercentile", "state-popularityPercentile",
            "state-predRatingPercentile", "state-predActionPercentile"]
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predRatingPercentile"
            feaName = "predRating"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predActionPercentile"
            feaName = "predAction"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "releaseYearPercentile"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "popularityPercentile"
            feaName = "popularity"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predRatingPercentile", "state-predRatingPercentile"]
            feaName = "predRatingInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predActionPercentile", "state-predActionPercentile"]
            feaName = "predActionInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["releaseYearPercentile", "state-releaseYearPercentile"]
            feaName = "releaseYearInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["popularityPercentile", "state-popularityPercentile"]
            feaName = "popularityInt"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 1.0
        l2coef = 0.0
      }
      features = [
        "globalBias", "predRating", "predAction", "releaseYear", "popularity",
        "predRatingInt", "predActionInt", "releaseYearInt", "popularityInt",
      ]
      numMainFeatures = 5
    }, {
      name = "sp-ra-build"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "sp-ra-model"
      modelFile = ${samantha.modelDir}"/reinforceAllLinearUCB.bin"
      labelName = "delayedReward"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      evaluatorNames = ["RecommendationEvaluator"]
      expandersConfig = [{
        expanderClass = "org.grouplens.samantha.server.reinforce.QLearningExpander"
        recommenderName = "sp-ra-build-dep"
        rewardAttr = "reward"
        delayedRewardAttr = "delayedReward"
        decay = 1.0
        transitionerConfig {
          transitionerClass = "org.grouplens.samantha.server.reinforce.SimpleAverageUserState"
          actionAttrs = ["predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile"]
          stateKeys = ["userId"]
          stateModelName = "sp-ra-user-state-model"
        }
        sampleRate = 1.0
      }]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predRatingPercentile"
            feaName = "predRating"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predActionPercentile"
            feaName = "predAction"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "releaseYearPercentile"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "popularityPercentile"
            feaName = "popularity"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predRatingPercentile", "state-predRatingPercentile"]
            feaName = "predRatingInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predActionPercentile", "state-predActionPercentile"]
            feaName = "predActionInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["releaseYearPercentile", "state-releaseYearPercentile"]
            feaName = "releaseYearInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["popularityPercentile", "state-popularityPercentile"]
            feaName = "popularityInt"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.AsyncParallelSGDConfig"
        learningRate = 1.0
        l2coef = 0.0
        minIter = 5
        maxIter = 20
        numProcessors = 3
      }
      features = [
        "globalBias", "predRating", "predAction", "releaseYear", "popularity",
        "predRatingInt", "predActionInt", "releaseYearInt", "popularityInt",
      ]
      numMainFeatures = 5
    }, {
      name = "sp-ra"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "sp-ra-model"
      modelFile = ${samantha.modelDir}"/reinforceAllLinearUCB.bin"
      labelName = "delayedReward"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
        }, {
          expanderClass = "org.grouplens.samantha.server.reinforce.SimpleAverageUserState"
          actionAttrs = ["predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile"]
          stateKeys = ["userId"]
          stateModelName = "sp-ra-user-state-model"
          stateModelFile = ${samantha.modelDir}"/reinforceAllUserState.bin"
          updateKey = "updateState"
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
          expandersConfig = [
            {
              expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
              modelName = "spirit-item-info-model"
              idField = "movieId"
              infoFields = ["releaseYear", "popularity"]
              daoConfigKey = "daoConfig"
              entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
            }, {
              expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
              predictorName = "sp-rating"
              scoreAttr = "predRating"
            }, {
              expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
              predictorName = "sp-action"
              scoreAttr = "predAction"
            }, {
              expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
              modelName = "spirit-percentile-model"
              attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
            }
          ]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predRatingPercentile"
            feaName = "predRating"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predActionPercentile"
            feaName = "predAction"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "releaseYearPercentile"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "popularityPercentile"
            feaName = "popularity"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predRatingPercentile", "state-predRatingPercentile"]
            feaName = "predRatingInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predActionPercentile", "state-predActionPercentile"]
            feaName = "predActionInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["releaseYearPercentile", "state-releaseYearPercentile"]
            feaName = "releaseYearInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["popularityPercentile", "state-popularityPercentile"]
            feaName = "popularityInt"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 1.0
        l2coef = 0.0
      }
      features = [
        "globalBias", "predRating", "predAction", "releaseYear", "popularity",
        "predRatingInt", "predActionInt", "releaseYearInt", "popularityInt",
      ]
      numMainFeatures = 5
    }, {
      name = "sp-bs"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "sp-bs-model"
      modelFile = ${samantha.modelDir}"/banditStateLinearUCB.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.ArrayItemId2InfoExpander"
          modelName = "spirit-item-info-model"
          idField = "movieId"
          infoFields = ["releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
        }, {
          expanderClass = "org.grouplens.samantha.server.reinforce.SimpleAverageUserState"
          actionAttrs = ["predRatingPercentile", "predActionPercentile", "releaseYearPercentile", "popularityPercentile"]
          stateKeys = ["userId"]
          stateModelName = "sp-ra-user-state-model"
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predRatingPercentile"
            feaName = "predRating"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predActionPercentile"
            feaName = "predAction"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "releaseYearPercentile"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "popularityPercentile"
            feaName = "popularity"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predRatingPercentile", "state-predRatingPercentile"]
            feaName = "predRatingInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["predActionPercentile", "state-predActionPercentile"]
            feaName = "predActionInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["releaseYearPercentile", "state-releaseYearPercentile"]
            feaName = "releaseYearInt"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.MultiplicativeInteractionExtractorConfig"
            indexName = "BIASES"
            attrNames = ["popularityPercentile", "state-popularityPercentile"]
            feaName = "popularityInt"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 1.0
        l2coef = 0.0
      }
      features = [
        "globalBias", "predRating", "predAction", "releaseYear", "popularity",
        "predRatingInt", "predActionInt", "releaseYearInt", "popularityInt",
      ]
      numMainFeatures = 5
    }, {
      name = "sp-bt"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "sp-bt-model"
      modelFile = ${samantha.modelDir}"/banditTwoLinearUCB.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          attrNames = ["predRating", "predAction"]
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predRatingPercentile"
            feaName = "predRating"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predActionPercentile"
            feaName = "predAction"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 1.0
        l2coef = 0.0
      }
      features = ["globalBias", "predRating", "predAction"]
      numMainFeatures = 3
    }, {
      name = "sp-ba"
      configClass = "org.grouplens.samantha.server.predictor.LinearUCBPredictorConfig"
      modelName = "sp-ba-model"
      modelFile = ${samantha.modelDir}"/banditAllLinearUCB.bin"
      labelName = "action"
      weightName = "weight"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "daoConfig"
      serializedKey = "serialized"
      instanceName = "instance"
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-action"
          scoreAttr = "predAction"
        }, {
          expanderClass = "org.grouplens.samantha.server.expander.PercentileExpander"
          modelName = "spirit-percentile-model"
          modelFile = ${samantha.modelDir}"/percentileModel.bin"
          sampleRate = 0.1
          maxNumValues = 100
          attrNamesKey = "attrNames"
          attrNames = ["predRating", "predAction", "releaseYear", "popularity"]
          daoConfigKey = "daoConfig"
          entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
          attrName2Config {
            predRating {
              numValues = 50
              expandersConfig = [
                {
                  expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
                  predictorName = "sp-rating"
                  scoreAttr = "predRating"
                }
              ]
            }
            predAction {
              numValues = 50
              expandersConfig = [
                {
                  expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
                  predictorName = "sp-action"
                  scoreAttr = "predAction"
                }
              ]
            }
            releaseYear {
              numValues = 50
            }
            popularity {
              numValues = 50
            }
          }
        }
      ]
      featurizer {
        featureExtractorList = [
          {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.ConstantOneExtractorConfig"
            indexName = "BIASES"
            attrName = "globalBias"
            feaName = "globalBias"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predRatingPercentile"
            feaName = "predRating"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "predActionPercentile"
            feaName = "predAction"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "releaseYearPercentile"
            feaName = "releaseYear"
          }, {
            extractorConfigClass = "org.grouplens.samantha.server.featurizer.IdentityExtractorConfig"
            indexName = "BIASES"
            attrName = "popularityPercentile"
            feaName = "popularity"
          }
        ]
      }
      lambda = 10
      alpha = 0.0
      onlineOptimizationMethod {
        methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
        learningRate = 1.0
        l2coef = 0.0
      }
      features = [
        "globalBias", "predRating", "predAction", "releaseYear", "popularity"
      ]
      numMainFeatures = 5
    }
  ]
  rankers = [
    {
      name = "RatingPredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-rating"
      pageSize = 24
    }, {
      name = "ActionPredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-action"
      pageSize = 24
      expandersConfig = [
        {
          expanderClass = "org.grouplens.samantha.server.expander.PredictorBasedExpander"
          predictorName = "sp-rating"
          scoreAttr = "predRating"
        }
      ]
    }, {
      name = "BanditStatePredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-bs"
      pageSize = 24
    }, {
      name = "BanditTwoPredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-bt"
      pageSize = 24
    }, {
      name = "BanditAllPredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-ba"
      pageSize = 24
    }, {
      name = "ReinforceAllPredictorBasedRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-ra"
      pageSize = 24
    }, {
      name = "ReinforceAllPredictorBuildingRanker"
      configClass = "org.grouplens.samantha.server.ranker.PredictorBasedRankerConfig"
      predictor = "sp-ra-build-dep"
      pageSize = 2
    }
  ]
  recommenders = [
    {
      name = "sp-rating"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "RatingPredictorBasedRanker"
    }, {
      name = "sp-action"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "ActionPredictorBasedRanker"
    }, {
      name = "sp-ba"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "BanditAllPredictorBasedRanker"
    }, {
      name = "sp-bt"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "BanditTwoPredictorBasedRanker"
    }, {
      name = "sp-ra"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "ReinforceAllPredictorBasedRanker"
    }, {
      name = "sp-ra-build-dep"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "ReinforceAllPredictorBuildingRanker"
    }, {
      name = "sp-bs"
      configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
      retriever = "MultipleBlendingMovieRetriever"
      ranker = "BanditStatePredictorBasedRanker"
    }
  ]
  router = {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }
  evaluators = [
    {
      name = "BinaryPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      indexerType = "BinaryPredictionEvaluator"
      predictor = "sp-action"
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "action"
          aucType = "GLOBAL"
          minValue = 0.65
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.AUCConfig"
          labelName = "action"
          aucType = "PERGROUP"
          minValue = 0.65
        }
      ]
    }, {
      name = "RealPredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["loggerBasedIndexer"]
      predictor = "sp-rating"
      predictorKey = "predictor"
      groupKeys = ["userId"]
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
          maxValue = 0.8
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
          maxValue = 1.2
        }
      ]
    }, {
      name = "RecommendationEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.RecommendationEvaluatorConfig"
      recommendationIndexers = []
      indexers = ["loggerBasedIndexer"]
      recommender = "sp-ra"
      recommenderKey = "recommender"
      entityDaosConfig = ${samantha.movielens-spirit.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      groupKeys = ["userId"]
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAPConfig"
          itemKeys = ["movieId"]
          relevanceKey = "action"
          minValue = 0.002
          threshold = 0.5
          N = [8, 24]
        }
      ]
    }
  ]
  schedulers = [
    {
      name = "spirit-bootstrap-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 51 21 14 1 ? 2027"
      jobClass = "org.grouplens.samantha.server.scheduler.ComponentGetterQuartzJob"
      jobConfig {
        tasks = [
          { # index movie data
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyMovieData.tsv" #movieId, releaseYear, popularity
                separator = "\t"
              }
            }]
            runner {
              name = "goodMovieData" #redis indexer
              componentType = "INDEXER"
              requestContext {}
            }
          }, { #train a item id to info model based on historyMovieData.tsv
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyMovieData.tsv" #movieId, releaseYear, popularity
                separator = "\t"
              }
            }]
            runner {
              name = "MultipleBlendingMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-info-model"
                modelOperation = "BUILD"
              }
            }
          }, { # index user movie interaction data
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyInteraction.tsv" #userId, movieId
                separator = "\t"
              }
            }]
            runner {
              name = "userMovieInteraction" #redis indexer
              componentType = "INDEXER"
              requestContext {}
            }
          }, { # index all history rating data
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyRating.tsv" #userId, movieId, rating, tstamp
                separator = "\t"
              }
            }]
            runner {
              name = "userMovieRatingHistory" #csv file indexer
              componentType = "INDEXER"
              requestContext {}
            }
          }, { # train a rating predictor model
            indexerData = [{
              indexerName = "userMovieRatingHistory"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "today - 365 DAYS"
                endTime = "today - 7 DAYS"
              }
            }, {
              indexerName = "userMovieRatingHistory"
              daoConfigKey = "validationDaoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "today - 0 DAYS"
              }
            }, {
              indexerName = "userMovieRatingHistory"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "today - 0 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-rating"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-rating-model"
                modelOperation = "BUILD"
              }
            }
          }, { # update the rating predictor model
            indexerData = [{
              indexerName = "userMovieRatingHistory"
              daoConfigKey = "daoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "now - 0 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-rating"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-rating-model"
                modelOperation = "UPDATE"
              }
            }
          }, { #train a item knn model based on rating predictor model
            indexerData = []
            otherData = []
            runner {
              name = "RedisMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-knn-model"
                modelOperation = "BUILD"
              }
            }
          }, { #train a feature support model based on rating predictor model
            indexerData = []
            otherData = []
            runner {
              name = "ReinforceLearningFeatureSupportMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-feature-support-model"
                modelOperation = "BUILD"
              }
            }
          }, { #index all history action data
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyAction.tsv" #userId, movieId, action, tstamp
                separator = "\t"
              }
            }]
            runner {
              name = "userMovieActionHistory" #csv file indexer
              componentType = "INDEXER"
              requestContext {}
            }
          }, { #train a action predictor model
            indexerData = [{
              indexerName = "userMovieActionHistory"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "today - 365 DAYS"
                endTime = "today - 7 DAYS"
              }
            }, {
              indexerName = "userMovieActionHistory"
              daoConfigKey = "validationDaoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "today - 0 DAYS"
              }
            }, {
              indexerName = "groupedUserMovieAction"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "today - 0 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-action"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-action-model"
                modelOperation = "BUILD"
              }
            }
          }, { # update the action predictor model
            indexerData = [{
              indexerName = "userMovieActionHistory"
              daoConfigKey = "daoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "now - 0 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-action"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-action-model"
                modelOperation = "UPDATE"
              }
            }
          }, { #index all history movie show data
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyShow.tsv" #restricted to top-picks, userId, sessionId,
                # movieId, action, tstamp
                separator = "\t"
              }
            }]
            runner {
              name = "userMoviePercentileHistory" #csv file indexer, expanded to userId, sessionId, movieId, action, releaseYear, popularity,
              # predRating, predAction, tstamp
              componentType = "INDEXER"
              requestContext {}
            }
          }, { #train percentile model
            indexerData = [{
              indexerName = "userMoviePercentileHistory"
              daoConfigKey = "daoConfig"
              requestContext {
                beginTime = "today - 365 DAYS"
                endTime = "today - 7 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "spirit-percentile-model"
                modelOperation = "BUILD"
              }
            }
          }, { #index all history movie reinforce data and compute the user state model
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyShow.tsv" #restricted to top-picks, userId, sessionId,
                # movieId, action, tstamp
                separator = "\t"
              }
            }]
            runner {
              name = "userMovieShowHistory" #csv file indexer, have user state model, expanded to userId, sessionId, movieId, action, releaseYear, popularity,
              # predRating, predAction, releaseYearPercentile, popularityPercentile,
              # predRatingPercentile, predActionPercentile, state-releaseYearPercentile,
              # state-popularityPercentile, state-predRatingPercentile, state-predActionPercentile,
              # sp-ra-user-state-model-state-cnt, tstamp
              componentType = "INDEXER"
              requestContext {
                updateState = true #compute the user state model
              }
            }
          }, { #train the reinforce model
            indexerData = [{
              indexerName = "userMovieShowHistory"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "today - 365 DAYS"
                endTime = "today - 7 DAYS"
              }
            }, {
              indexerName = "groupedUserMovieAction"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "today - 0 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-ra-build" #Q learning expander
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-model"
                modelOperation = "BUILD"
              }
            }
          }
        ]
      }
    }, {
      name = "spirit-hourly-model-backup-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 45 * * * ? 2027"
      jobClass = "org.grouplens.samantha.server.scheduler.DirectoryBackupQuartzJob"
      jobConfig {
        tasks = [{
          sourceDir = ${samantha.modelDir}
          destDir = ${samantha.backupDir}
          reserve = "3 DAYS"
        }]
      }
    }, {
      name = "spirit-hourly-model-dumping-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 30 * * * ? 2027"
      jobClass = "org.grouplens.samantha.server.scheduler.ComponentGetterQuartzJob"
      jobConfig {
        tasks = [
          {
            indexerData = []
            otherData = []
            runner {
              name = "sp-rating"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-rating-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-action"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-action-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-bt"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-bt-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ba-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-bs"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-bs-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ra"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "spirit-percentile-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "RedisMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-knn-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "ReinforceLearningFeatureSupportMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-feature-support-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ra"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-user-state-model"
                modelOperation = "DUMP"
              }
            }
          }
        ]
      }
    }, {
      name = "spirit-model-loading-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 8 7 8 2 ? 2027"
      jobClass = "org.grouplens.samantha.server.scheduler.ComponentGetterQuartzJob"
      jobConfig {
        tasks = [
          { #train a item id to info model based on historyMovieData.tsv
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyMovieData.tsv" #movieId, releaseYear, popularity
                separator = "\t"
              }
            }]
            runner {
              name = "MultipleBlendingMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-info-model"
                modelOperation = "BUILD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-rating"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-rating-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-action"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-action-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-bt"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-bt-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ba-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-bs"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-bs-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "spirit-percentile-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "RedisMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-knn-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ra"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-user-state-model"
                modelOperation = "LOAD"
              }
            }
          }
        ]
      }
    }, {
      name = "spirit-weekly-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      #cronExpression = "30 8 22 9 2 ? 2017"
      cronExpression = "0 0 0 ? * SUN *"
      jobClass = "org.grouplens.samantha.server.scheduler.ComponentGetterQuartzJob"
      jobConfig {
        tasks = [
          { #train a item id to info model based on historyMovieData.tsv
            indexerData = []
            otherData = [{
              daoConfigKey = "daoConfig"
              daoConfig {
                entityDaoName = "CSVFileEntityDAO"
                filePath = ${samantha.dataDir}"/historyMovieData.tsv" #movieId, releaseYear, popularity
                separator = "\t"
              }
            }]
            runner {
              name = "MultipleBlendingMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-info-model"
                modelOperation = "BUILD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-rating"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-rating-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-action"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-action-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-bt"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-bt-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ba-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-bs"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-bs-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ba"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "spirit-percentile-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "RedisMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-item-knn-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ra"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-user-state-model"
                modelOperation = "LOAD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "ReinforceLearningFeatureSupportMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-feature-support-model"
                modelOperation = "BUILD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "ReinforceLearningFeatureSupportMovieRetriever"
              componentType = "RETRIEVER"
              requestContext {
                modelName = "spirit-feature-support-model"
                modelOperation = "DUMP"
              }
            }
          }, {
            indexerData = [{
              indexerName = "userMovieShow"
              daoConfigKey = "learningDaoConfig"
              requestContext {
                beginTime = "today - 365 DAYS"
                endTime = "today - 7 DAYS"
              }
            }, {
              indexerName = "groupedUserMovieAction"
              daoConfigKey = "evaluatorDaoConfig"
              requestContext {
                beginTime = "today - 7 DAYS"
                endTime = "today - 0 DAYS"
              }
            }]
            otherData = []
            runner {
              name = "sp-ra-build" #Q learning expander
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-model"
                modelOperation = "BUILD"
              }
            }
          }, {
            indexerData = []
            otherData = []
            runner {
              name = "sp-ra"
              componentType = "PREDICTOR"
              requestContext {
                modelName = "sp-ra-model"
                modelOperation = "DUMP"
              }
            }
          }
        ]
      }
    }
  ]
}
