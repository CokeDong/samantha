samantha.ephemeral {
  engineType = "RECOMMENDER"

  entityDaosConfig {
    entityDaoKey = "entityDaoName"
    RequestEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.RequestEntityDAOConfig"
      entitiesKey = "entities"
    }
    RequestItemIDListDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.RequestItemIDListDAOConfig"
      attrName = "movieId"
      itemListKey = "movieIds"
    }
    CSVFileEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVFileDAOConfig"
      filePathKey = "filePath"
      separatorKey = "separator"
    }
  }

  indexers = [
    {
      name = "StandardOutputIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }
  ]

  retrievers = [
    {
      // TODO: Should we exclude movies that the user has rated? If so, do we do that here?
      name = "FeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      maxHits = 5000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      predictorName = "svd-rating-predictor"
      modelName = "svd-rating-model"
    },
    {
      name = "RequestBasedMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.RequestBasedRetrieverConfig"
      entityDaosConfig = ${samantha.ephemeral.entityDaosConfig}
      daoConfigKey = "entityDaoConfigs"
    }
  ]

  predictors = [{
    name = "svd-rating-predictor"
    configClass = "org.grouplens.samantha.ephemeral.CustomSVDFeaturePredictorConfig"
    modelName = "svd-rating-model"
    modelFile = ${samantha.modelDir}"/svd-rating-model-nn-test-4.bin"
    //    modelFile = ${samantha.modelDir}"/svd-rating-model-semi-nn-test-1.bin"
    labelName = "rating"
    weightName = "weight"
    entityDaosConfig = ${samantha.ephemeral.entityDaosConfig}
    daoConfigKey = "entityDaoConfigs"
    serializedKey = "serialized"
    instanceName = "instance"
    evaluatorNames = []
    groupKeys = ["userId"]
    featurizer {
      featureExtractorList = [
        {
          extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
          indexName = "FACTORS"
          attrName = "userId"
          feaName = "userFactor"
        },
        {
          extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
          attrName = "movieId"
          indexName = "FACTORS"
          feaName = "movieFactor"
        }
      ]
    }
    objectiveConfig {
      objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
    }
    optimizationMethod {
      methodClass = "org.grouplens.samantha.ephemeral.CustomStochasticGradientDescentConfig"
      maxIter = 50
      learningRate = 0.01
      l2coef = 0.01
      cachePath = ${samantha.dataDir}"/cachePath"
    }
    factDim = 30
    biasFeas = []
    ufactFeas = ["userFactor"]
    ifactFeas = ["movieFactor"]
  }]

  rankers = [{
    name = "EphemeralRanker"
    configClass = "org.grouplens.samantha.ephemeral.EphemeralRankerConfig"
    svdfeaturePredictor = "svd-rating-predictor"
    svdfeatureModel = "svd-rating-model"

    selectionCriteriaByRound = {
      "1" = [
        {
          n: 5
          similarityMetric: "score1"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 100
          ratedDropout: 0.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 5
          similarityMetric: "score1"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 200
          ratedDropout: 0.0
          dropout: 0.50
          nthMostDistant: 1
        }
      ]
      "2" = [
        {
          n: 3
          similarityMetric: "score2"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 5
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 3
          similarityMetric: "score2"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 40
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 4
          similarityMetric: "score2"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 100
          ratedDropout: 0.50
          dropout: 0.50
          nthMostDistant: 1
        }
      ]
      "3" = [
        {
          n: 3
          similarityMetric: "score3"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 5
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 3
          similarityMetric: "score3"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 20
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 4
          similarityMetric: "score3"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 50
          ratedDropout: 0.50
          dropout: 0.50
          nthMostDistant: 1
        }
      ]

    }

    // Number of ratings to use for hyper-personalized starting point condition
    minNumRecentRatings = 1
    maxNumRecentRatings = 5
    excludeRecentRatingsBelow = 4.0

    preferences = [-1, 0, 1]

    // These are relative values.
    preferenceWeights = {
      "1" = 1.0
      "0" = 0.0
      "-1" = -0.5
    }

    // -1 indicates that we should exclude movies with that preference score
    // going back all of the rounds. 0 excludes no movies with that preference
    // score. Positive integers exclude movies in the last n rounds...
    numRoundsToExclude = {
      "1" = -1
      "0" = -1
      "-1" = -1
    }
  }]

  recommenders = [{
    name = "ephemeral-recommender"
    configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
    retriever = "RequestBasedMovieRetriever"
    ranker = "EphemeralRanker"
  }]

  router {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }

  evaluators = [
    {
      name = "PredictionEvaluator"
      configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
      predictionIndexers = []
      indexers = ["StandardOutputIndexer"]
      indexerType = "PredictionEvaluator"
      predictorKey = "predictor"
      groupKey = "userId"
      entityDaosConfig = ${samantha.ephemeral.entityDaosConfig}
      daoConfigKey = "evaluatorDaoConfig"
      metrics = [
        {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
          labelName = "rating"
        }, {
          metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
          labelName = "rating"
        }
      ]
    }
  ]

  schedulers = [
    {
      name = "ephemeral-model-build-scheduler"
      configClass = "org.grouplens.samantha.server.scheduler.QuartzSchedulerConfig"
      cronExpression = "0 0 0/6 * * ? *" // TODO: One a day? 4 times a day? Does it mater?
      jobClass = "org.grouplens.samantha.ephemeral.BuildModelJob"
      jobConfig {
        svdfeaturePredictor = "svd-rating-predictor"
        svdfeatureModel = "svd-rating-model"
        indexerData = {
          indexerEngineName = "movielens-spirit"
          indexerName = "userMovieRating"
          requestContext = {
            beginTime = "1970-01-01 00:00:00"
            endTime = "NOW"
          }
          daoConfigKey = "entityDaoConfigs"
          entityDaoConfigs = ${samantha.movielens-spirit.entityDaosConfig}
        }
        // TODO: Leave out tstamp for smaller file size?
        dataFields = ["userId", "movieId", "rating", "tstamp"]
        valFraction = 0.1
        valPath = "data/ephemeral/val.csv"
        trainPath = "data/ephemeral/train.csv"
        daoConfigKey = "entityDaoConfigs"
        entityDaoConfigs = ${samantha.ephemeral.entityDaosConfig}
        entityDaoName = "CSVFileEntityDAO"

      }
    }
  ]
}
