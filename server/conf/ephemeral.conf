samantha.ephemeral {
  engineType = "RECOMMENDER"

  entityDaosConfig = {
    entityDaoKey = "entityDaoName"
    CSVFileEntityDAO {
      daoConfigClass = "org.grouplens.samantha.server.dao.CSVFileDAOConfig"
      filePathKey = "filePath"
      separatorKey = "separator"
    }
    RandomCSVFileEntityDAO {
      daoConfigClass = "org.grouplens.samantha.ephemeral.RandomCSVFileDAOConfig"
      filePathKey = "filePath"
      separatorKey = "separator"
    }
  }

  indexers = [
    {
      name = "LoggerBasedIndexer"
      configClass = "org.grouplens.samantha.server.indexer.LoggerBasedIndexerConfig"
    }
  ]

  retrievers = [
    {
      name = "FeatureSupportMovieRetriever"
      configClass = "org.grouplens.samantha.server.retriever.FeatureSupportRetrieverConfig"
      modelName = "support-retriever-model"
      modelFile = ${samantha.modelDir}"/support-retriever-model.bin"
      maxHits = 10000
      itemAttrs = ["movieId"]
      supportAttr = "support"
      svdfeaPredictorName = "support-predictor"
      svdfeaModelName = "support-model"
    }
  ]

  predictors = [{
    name = "support-predictor"
    configClass = "org.grouplens.samantha.server.predictor.SVDFeaturePredictorConfig"
    modelName = "support-model"
    modelFile = ${samantha.modelDir}"/support-model.bin"
    labelName = "rating"
    weightName = "weight"
    entityDaosConfig = ${samantha.ephemeral.entityDaosConfig}
    daoConfigKey = "updateDaoConfig"
    serializedKey = "serialized"
    instanceName = "instance"
    evaluatorNames = []
    groupKeys = ["userId"]
    featurizer {
      featureExtractorList = [
        {
          extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
          indexName = "BIASES"
          attrName = "userId"
          feaName = "userBias"
        }, {
          extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
          attrName = "movieId"
          indexName = "BIASES"
          feaName = "itemBias"
        }
      ]
    }
    objectiveConfig {
      objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
    }
    optimizationMethod {
      methodClass = "org.grouplens.samantha.server.solver.StochasticGradientDescentConfig"
      maxIter = 1
      learningRate = 0.01
      l2coef = 0.01
      cachePath = ${samantha.dataDir}"/cachePath"
    }
    factDim = 1
    biasFeas = ["userBias", "itemBias"]
    ufactFeas = []
    ifactFeas = []
  }, {
    name = "ephemeral-predictor"
    configClass = "org.grouplens.samantha.ephemeral.model.CustomSVDFeaturePredictorConfig"
    modelName = "ephemeral-model"
    modelFile = ${samantha.modelDir}"/ephemeral-model.bin"
    labelName = "rating"
    weightName = "weight"
    entityDaosConfig = ${samantha.ephemeral.entityDaosConfig}
    daoConfigKey = "updateDaoConfig"
    serializedKey = "serialized"
    instanceName = "instance"
    evaluatorNames = []
    groupKeys = ["userId"]
    featurizer {
      featureExtractorList = [
        {
          extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
          indexName = "FACTORS"
          attrName = "userId"
          feaName = "userFactor"
        },
        {
          extractorConfigClass = "org.grouplens.samantha.server.featurizer.StringValueExtractorConfig"
          attrName = "movieId"
          indexName = "FACTORS"
          feaName = "movieFactor"
        }
      ]
    }
    objectiveConfig {
      objectiveClass = "org.grouplens.samantha.server.objective.L2NormLossConfig"
    }
    optimizationMethod {
      methodClass = "org.grouplens.samantha.ephemeral.model.CustomStochasticGradientDescentConfig"
      maxIter = 50
      learningRate = 0.01
      l2coef = 0.01
      cachePath = ${samantha.dataDir}"/cachePath"
    }
    factDim = 30
    biasFeas = []
    ufactFeas = ["userFactor"]
    ifactFeas = ["movieFactor"]
  }]

  rankers = [{
    name = "EphemeralRanker"
    configClass = "org.grouplens.samantha.ephemeral.EphemeralRankerConfig"
    svdfeaturePredictor = "ephemeral-predictor"
    svdfeatureModel = "ephemeral-model"

    selectionCriteriaByRound = {
      "1" = [
        {
          n: 5
          similarityMetric: "score1"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 100
          ratedDropout: 0.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 5
          similarityMetric: "score1"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 200
          ratedDropout: 0.0
          dropout: 0.50
          nthMostDistant: 1
        }
      ]
      "2" = [
        {
          n: 3
          similarityMetric: "score2"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 5
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 3
          similarityMetric: "score2"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 40
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 4
          similarityMetric: "score2"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 100
          ratedDropout: 0.50
          dropout: 0.50
          nthMostDistant: 1
        }
      ]
      "3" = [
        {
          n: 3
          similarityMetric: "score3"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 5
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 3
          similarityMetric: "score3"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 20
          ratedDropout: 1.0
          dropout: 0.50
          nthMostDistant: 1
        },
        {
          n: 4
          similarityMetric: "score3"
          diversityMetric: "manhattanDistance"
          excludeBelow: 0.0
          limit: 50
          ratedDropout: 0.50
          dropout: 0.50
          nthMostDistant: 1
        }
      ]

    }

    // Number of ratings to use for hyper-personalized starting point condition
    minNumRecentRatings = 1
    maxNumRecentRatings = 5
    excludeRecentRatingsBelow = 4.0

    preferences = [-1, 0, 1]

    // These are relative values.
    preferenceWeights = {
      "1" = 1.0
      "0" = 0.0
      "-1" = -0.5
    }

    // -1 indicates that we should exclude movies with that preference score
    // going back all of the rounds. 0 excludes no movies with that preference
    // score. Positive integers exclude movies in the last n rounds...
    numRoundsToExclude = {
      "1" = -1
      "0" = -1
      "-1" = -1
    }
  }]

  recommenders = [{
    name = "ephemeral-recommender"
    configClass = "org.grouplens.samantha.server.recommender.StandardRecommenderConfig"
    retriever = "FeatureSupportMovieRetriever"
    ranker = "EphemeralRanker"
  }]

  router = {
    configClass = "org.grouplens.samantha.server.router.BasicRouterConfig"
    recommenderKey = "recommender"
    predictorKey = "predictor"
  }

  evaluators = [{
    name = "PredictionEvaluator"
    configClass = "org.grouplens.samantha.server.evaluator.PredictionEvaluatorConfig"
    predictionIndexers = []
    indexers = ["LoggerBasedIndexer"]
    predictor = "ephemeral-predictor"
    predictorKey = "predictor"
    groupKeys = ["userId"]
    entityDaosConfig = ${samantha.ephemeral.entityDaosConfig}
    daoConfigKey = "evaluatorDaoConfig"
    metrics = [
      {
        metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.MAEConfig"
        labelName = "rating"
      }, {
        metricConfigClass = "org.grouplens.samantha.server.evaluator.metric.RMSEConfig"
        labelName = "rating"
      }
    ]
  }]
  schedulers = []
}
